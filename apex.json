{
	// Variables

	"New variable": {
		"prefix": "ni",
		"body": "$1 $2 = new $1();\n$0",
		"description": "Construct a new variable and assign the result to a variable"
	},
	"New variable with params": {
		"prefix": "ni",
		"body": "$1 $2 = new $1($0);",
		"description": "Construct a new variable and assign the result to a variable"
	},

	// SOQL

	"SOQL template with clause": {
		"prefix": "soql template with clause",
		"body": [
			"[",
			"\tSELECT",
			"\t${1:field}",
			"\tFROM ${2:object}",
			"\tWHERE ${3:where}",
			"];"
		],
		"description": "A basic SOQL template with WHERE clause."
	},
	"SOQL template without clause": {
		"prefix": "soql template without clause",
		"body": [
			"[",
			"\tSELECT",
			"\t${1:field}",
			"\tFROM ${2:object}",
			"];"
		],
		"description": "A basic SOQL template without WHERE clause."
	},
	"Database dynamic SOQL to a list": {
		"prefix": "soqld",
		"body": [
			"List<$1> $2 = (List<$1>) Database.query($3);"
		],
		"description": "Dynamic SOQL to list"
	},
	"SOQL assign to list": {
		"prefix": "sqv",
		"body": "List<$1> $2 = [\n\tSELECT\n\tId\n\t,$0\n\tFROM $1\n];\n",
		"description": "SOQL query assignment to List variable"
	},
	"SOQL assign to map": {
		"prefix": "sqm",
		"body": "Map<Id, $1> $2 = new Map<Id, $1>([\n\tSELECT\n\tId\n\tFROM $1\n]);\n$0",
		"description": "SOQL query assignment to Map variable"
	},
	"Iterate SOQL result": {
		"prefix": "sqit",
		"body": "for ($1 $2 : [\n\tSELECT\n\tId\n\tFROM $1\n\t]\n\t) {\n\t$0\n}",
		"description": "Iterate SOQL query results"
	},

	// Checks

	"Instance check": {
		"prefix": "instt",
		"body": "if ($3 instanceof $1) {\n\t$1 $2 = ($1) $3;\n\t$0\n}",
		"description": "Checks object type with instanceof and down-casts it"
	},
	"if": {
		"prefix": "if",
		"body": "if ($1) {\n\t$0\n}",
		"description": "if"
	},
	"Check if map contains a key and then get it": {
		"prefix": "if map contains key, and get it",
		"body": [
			"if (${1:map}.containsKey(${2:key})) {",
			"\t${3:keyType} ${4:keyName} = ${1:map}.get(${2:key});",
			"\t$0",
			"}"
		],
		"description": "If map contains key then get"
	},
	"Check if map contains key": {
		"prefix": "if map contains key",
		"body": [
			"if (${1:map}.containsKey(${2:key})) {",
			"\t$0",
			"}"
		],
		"description": "If map contains key"
	},
	"Check if map contains key, and do otherwise": {
		"prefix": "if map contains key and else",
		"body": [
			"if (${1:map}.containsKey(${2:key})) {",
			"\t${3://what to do if the map contains the key...}",
			"} else {",
			"\t${4://what else?}",
			"}",
			"$0"
		],
		"description": "Map contains key if / else"
	},

	// Loops

	"Iterate a list of objects with a for-loop": {
		"prefix": "for iterator for list",
		"body": [
			"for (${1:type} ${2:var} : ${3:list}) {",
			"\t$0",
			"}"
		],
		"description": "Iteration over a list of objects"
	},
	"Iterate a map of objects with a for-loop": {
		"prefix": "for iterator for map values",
		"body": [
			"for (${1:type} ${2:object} : ${3:map}.keySet()) {",
			"\t$0",
			"}"
		],
		"description": "Iteration over a list of objects in a map's values"
	},
	"Iterate a map by the key": {
		"prefix": "for iterator for map keys",
		"body": [
			"for (${1:type} ${2:key} : ${3:map}.keySet()) {",
			"\t$0",
			"}"
		],
		"description": "Iteration over a list of objects in a map's values"
	},
	"Iterate trigger objects (with cast)": {
		"prefix": "iterate trigger records (with cast on list)",
		"body": [
			"for (${1:SObjectType} record : (List<${1:SObjectType}>) Trigger.${2|new,old|}) {",
			"\t$0",
			"}"
		],
		"description": "Iterate over a list of records on a trigger."
	},
	"Iterate trigger objects": {
		"prefix": "iterate trigger records",
		"body": [
			"for (${1:SObjectType} record : Trigger.${2|new,old|}) {",
			"\t$0",
			"}"
		],
		"description": "Iterate over a list of records on a trigger."
	},

	// JSON things

	"Deserialize JSON string to a map": {
		"prefix": "JSON to map",
		"body": "Map<String, Object> $1 = (Map<String, Object>) JSON.deserializeUntyped($0);",
		"description": "Deserialize a JSON string into a new Map and assign the result to a variable"
	},
	"Deserialize JSON": {
		"prefix": "JSON deserialize",
		"body": "$1 $2 = ($1) JSON.deserialize($3, $1.class);\n$0",
		"description": "Deserialize a JSON string into a new Map and assign the result to a variable"
	},
	"Serialize and debug": {
		"prefix": "JSON serialize pretty",
		"body": "System.debug(JSON.serializePretty($1));\n$0",
		"description": "JSON serialize pretty"
	},
	"JSON Serialize": {
		"prefix": "JSON serialize",
		"body": "JSON.serializePretty(${0:jsonObject})",
		"description": "JSON serialize pretty"
	},
	"JSON Serialize pretty": {
		"prefix": "JSON serialize pretty",
		"body": "JSON.serializePretty(${0:jsonObject})",
		"description": "JSON serialize pretty"
	},

	// Debugging

	"System debug with logging level": {
		"prefix": "debug with logging level",
		"body": "System.debug(LoggingLevel.${1|NONE,ERROR,WARN,INFO,DEBUG,FINE,FINER,FINEST|}, $2);\n$0",
		"description": "Debug logging with System.debug()"
	},

	// Comment

	"Doc comment": {
		"prefix": "comment doc",
		"body": "/**\n * $0\n */",
		"description": "Doc Comment"
	},

	// Misc

	"Run as": {
		"prefix": "runas",
		"body": [
			"System.runAs($1) {",
			"\t$0",
			"}"
		],
		"description": "Run test as another user."
	},
	"Read/write property getter and setter": {
		"prefix": "prwf",
		"body": "{ \n\tget {\n\t\t$1\n\t}\n\tset {\n\t\t$2\n\t}\n}$0",
		"description": "Read / write property getter and setter"
	},
	"Throw AuraHandledException": {
		"prefix": "tahe",
		"body": "throw new AuraHandledException($0);",
		"description": "Throw AuraHandledException"
	},
	"New HTTP request": {
		"prefix": "http request",
		"body": [
			"HttpRequest $3 = new HttpRequest();",
			"$3.setMethod($1);",
			"$3.setEndpoint($2);",
			"HttpResponse $4 = new Http().send($3);",
			"$0"
		],
		"description": "Generate new HTTP request code"
	},
	"Regex expression": {
		"prefix": "regex",
		"body": [
			"Pattern ${1:thePattern} = Pattern.compile('${2:pattern}');",
			"Matcher ${3:theMatcher} = ${1:thePattern}.matcher(body);"
		],
		"description": "Base code for a regex matcher"
	},

	// Method generation

	"Create private method": {
		"prefix": "private method",
		"body": "private $1 $2 ($3) {\n\t$0\n}\n",
		"description": "Create private method"
	},
	"Create private static method": {
		"prefix": "private static method",
		"body": "private static $1 $2 ($3) {\n\t$0\n}\n",
		"description": "Create private static method"
	},
	"Create private static method with a comment": {
		"prefix": "private static method with comment",
		"body": "/**\n * $4\n */\nprivate static $1 $2 ($3) {\n\t$0\n}\n",
		"description": "Create private static method with comment"
	},
	"Create a private method with a comment": {
		"prefix": "private method with comment",
		"body": "/**\n * $4\n */\nprivate $KEYWORD$ $1 $2 ($3) {\n\t$0\n}\n",
		"description": "Create private method with comment"
	},
	"Create a public static method": {
		"prefix": "public static method",
		"body": "public static $1 $2 ($3) {\n\t$0\n}\n\n",
		"description": "Create public static method"
	},
	"Create a public method": {
		"prefix": "public method",
		"body": "public $1 $2 ($3) {\n\t$0\n}\n",
		"description": "Create public method"
	},

	// Testing

	"Create test method with comment": {
		"prefix": "test method with comments",
		"body": "/**\n * $2\n */\n@IsTest\nstatic void $1 () {\n\t$0\n}\n",
		"description": "Create test method with comment"
	},
	"Create test method without comment": {
		"prefix": "test method",
		"body": "@IsTest\nstatic void $2 () {\n\t$0\n}\n",
		"description": "Create test method"
	},
	"Create test setup method": {
		"prefix": "test setup",
		"body": "@TestSetup static void makeData () {\n\t$0\n}\n",
		"description": "Create test setup method"
	},
	"Start/stop test methods": {
		"prefix": "test tags",
		"body": "Test.startTest();\n$0\nTest.stopTest();",
		"description": "Test's start/stop static methods"
	},
	"Create test with HttpCalloutMock": {
		"prefix": "HttpCalloutMock test start and stop",
		"body": [
			"Test.setMock(HttpCalloutMock.class, new $1());",
			"Test.startTest();",
			"$0",
			"Test.stopTest();"
		],
		"description": "Provides an implementation for the HttpCalloutMock interface to specify the response sent in the respond method, which the Apex runtime calls to send a response for a callout."
	},
	"Create test class body": {
		"prefix": "create test class body",
		"body": [
			"@IsTest",
			"private class ${1:class name} {",
			"",
			"\t@IsTest",
			"\tstatic void ${2:testMethod}() {",
			"\t\t$0",
			"\t}",
			"}"
		],
		"description": "Provides a small class body for a test class."
	},
	"Create new user": {
		"prefix": "new User",
		"body": [
			"User ${5:newUser} = new User(",
			"\tAlias = '${1:alias}',",
			"\tEmail='${5:standarduser@testorg.com}',",
			"\tEmailEncodingKey='UTF-8',",
			"\tLastName='${3:LastName}',",
			"\tLanguageLocaleKey='en_US',",
			"\tLocaleSidKey='en_US',",
			"\tProfileId = ${4|profileId,UserInfo.getProfileId()|},",
			"\tTimeZoneSidKey='America/Los_Angeles',",
			"\tUserName='user' + System.now().getTime() + '@testorg.com'",
			");",
			"insert ${5:newUser};$0"
		],
		"description": "Create a new user with required fields."
	},
	"Assign permission sets": {
		"prefix": "assign multiple permission sets",
		"body": [
			"List<String> permissionSetsNames = new List<String>{ $1 };",
			"List<PermissionSetAssignment> assignments = new List<PermissionSetAssignment>();",
			"",
			"for (PermissionSet ps : [SELECT Id FROM PermissionSet WHERE Name IN :permissionSetsNames]) {",
			"\tPermissionSetAssignment psa = new PermissionSetAssignment();",
			"\tpsa.AssigneeId = $2;",
			"\tpsa.PermissionSetId = ps.Id;",
			"\tassignments.add(psa);",
			"}",
			"insert assignments;"
		],
		"description": "Assign multiple permission sets searched by Name to a user."
	},
	"Assert object access": {
		"prefix": "assert object access",
		"body": "System.assert(Schema.SObjectType.${1:object API name}.isAccessible(), 'User should have access to the object ${1:object API name}.');",
		"description": "Asserts the current user has access to a field."
	},
	"Assert field access": {
		"prefix": "assert field access",
		"body": "System.assert(Schema.SObjectType.${1:object API name}.fields.${2:field API name}.isAccessible(), 'User should have access to the field: ${1:object API name}.' + Schema.SObjectType.${1:object API name}.fields.${2:field API name}.getLocalName());",
		"description": "Asserts the current user has access to a field."
	},

	// More advanced snippets below

	// Database inserts

	"Database insert single record": {
		"prefix": "insert",
		"body": [
			"Database.SaveResult $1 = Database.insert($2, $3);",
			"if ($1.isSuccess()) {",
			"\t$0",
			"}"
		],
		"description": "Adds an sObject, such as an individual account or contact, to your organization's data."
	},
	"Database insert with iteration of results": {
		"prefix": "insert",
		"body": [
			"List<Database.SaveResult> $1 = Database.insert($2, $3);",
			"for (Database.SaveResult sr : $1) {",
			"\tif (result.isSuccess()) {",
			"\t\t$0",
			"\t} else {",
			"\t\t",
			"\t}",
			"}"
		],
		"description": "Insert and iterate over SaveResults"
	},

	// Database updates

	"Database update single record": {
		"prefix": "update",
		"body": [
			"Database.SaveResult $1 = Database.update($2, $3);",
			"if ($1.isSuccess()) {",
			"\t$0",
			"}"
		],
		"description": "Adds an sObject, such as an individual account or contact, to your organization's data."
	},
	"Database update with iteration of results": {
		"prefix": "update",
		"body": [
			"List<Database.SaveResult> $1 = Database.update($2, $3);",
			"for (Database.SaveResult sr : $1) {",
			"\tif (result.isSuccess()) {",
			"\t\t$0",
			"\t} else {",
			"\t\t",
			"\t}",
			"}"
		],
		"description": "Modifies one or more existing sObject records, such as individual accounts or contactsinvoice statements, in your organization’s data."
	},

	// Database upserts

	"Database upsert single record": {
		"prefix": "upsert",
		"body": [
			"Database.UpsertResult $1 = Database.upsert($2, $3, $4);",
			"if ($1.isSuccess()) {",
			"\t$0",
			"}"
		],
		"description": "upserts an existing sObject record, such as an individual account or contact, from your organization's data."
	},
	"Database upsert with iteration of results": {
		"prefix": "upsert",
		"body": [
			"List<Database.UpsertResult> $1 = Database.upsert($2, $3, $4);",
			"for (Database.UpsertResult ur : $1) {",
			"\tif (result.isSuccess()) {",
			"\t\t$0",
			"\t} else {",
			"\t\t",
			"\t}",
			"}"
		],
		"description": "Deletes a list of existing sObject records, such as individual accounts or contacts, from your organization’s data."
	},

	// Database deletes

	"Database delete single record": {
		"prefix": "delete",
		"body": [
			"Database.DeleteResult $1 = Database.delete($2, $3);",
			"if ($1.isSuccess()) {",
			"\t$0",
			"}"
		],
		"description": "Deletes an existing sObject record, such as an individual account or contact, from your organization's data."
	},
	"Database delete with iteration of results": {
		"prefix": "delete",
		"body": [
			"List<Database.DeleteResult> $1 = Database.delete($2, $3);",
			"for (Database.DeleteResult dr : $1) {",
			"\tif (result.isSuccess()) {",
			"\t\t$0",
			"\t} else {",
			"\t\t",
			"\t}",
			"}"
		],
		"description": "Deletes a list of existing sObject records, such as individual accounts or contacts, from your organization’s data."
	},

	"Copyright": {
		"prefix": "copyright",
		"body": "Copyright $CURRENT_YEAR $0",
		"description": "Copyright"
	},

	"List to map based on criteria": {
		"prefix": "maplc",
		"body": [
			"${8|public,private,global|} $1 Map<$2, $3> $7 ($4 $5) {",
			"\tMap<$2, $3> result = new Map<$2, $3>();",
			"\tfor ($4 r : $5) {",
			"\t\tif (!result.containsKey($6)) {",
			"\t\t\tresult.put($6, new $3());",
			"\t\t}",
			"\t\t$0",
			"\t}",
			"\treturn result;",
			"}"
		],
		"description": "Generates a method to iterate a list of records and return a map based on some criteira."
	},

	// batch class snippet

	"Batch class snippet": {
		"prefix": "batch class model",
		"body": [
			"global class ${2:BatchClassName} implements Database.Batchable<${1:SObject}> {",
			"\t",
			"\tglobal Iterable<${1:SObject}> start (Database.BatchableContext bc) {",
			"\t\t// return SOQL",
			"\t}",
			"",
			"\tglobal void execute (Database.BatchableContext bc, List<${1:SObject}> scope) {",
			"\t\t// execution",
			"\t\t$0",
			"\t}",
			"",
			"\tglobal void finish (Database.BatchableContext bc) {",
			"\t\t// finish",
			"\t}",
			"}"
		],
		"description": "Generate a batch class model"
	},

	// Schema
	"Get record type Id by developer name": {
		"prefix": "get record type by dev name",
		"body": "Schema.$1.getSObjectType().getDescribe().getRecordTypeInfosByDeveloperName().get('$2').getRecordTypeId()",
		"description": "Query the Schema for the record type id."
	},
	"Generate record Id": {
		"prefix": "generate record id",
		"body": [
			"Schema.${1:SObjectApiName}.getSObjectType().getDescribe().getKeyPrefix() + '010000000000AAA'"
		],
		"description": "generates a simple record Id"
	},

	"Batch class summary status code errors": {
		"prefix": "Save result summary errors by status code",
		"body": [
			"Integer ${1:successs} = 0;",
			"Integer ${2:errors} = 0;",
			"",
			"Map<System.StatusCode, Integer> ${3:errorCount} = new Map<System.StatusCode, Integer>();",
			"",
			"for (Database.SaveResult sr : Database.update(records, false)) {",
			"\tif (!sr.isSuccess()) {",
			"\t\tfor (Database.Error err : sr.getErrors()) {",
			"\t\t\tSystem.StatusCode code = err.getStatusCode();",
			"\t\t\tif (code == System.StatusCode.INVALID_OR_NULL_FOR_RESTRICTED_PICKLIST) {",
			"\t\t\t\tSystem.debug(LoggingLevel.ERROR, sr.getErrors());",
			"\t\t\t}",
			"\t\t\tif (${3:errorCount}.containsKey(code)) {",
			"\t\t\t\tInteger errCount = ${3:errorCount}.get(code);",
			"\t\t\t\t${3:errorCount}.put(code, errCount + 1);",
			"\t\t\t} else {",
			"\t\t\t\t${3:errorCount}.put(code, 1);",
			"\t\t\t}",
			"\t\t}",
			"\t\t${2:errors}++;",
			"\t} else {",
			"\t\t${1:successs}++;",
			"\t}",
			"}",
			"",
			"System.debug(LoggingLevel.INFO, '${1:successs}: ' + ${1:successs});",
			"System.debug(LoggingLevel.INFO, '${2:errors}: ' + ${2:errors});",
			"",
			"for (System.StatusCode code : ${3:errorCount}.keySet()) {",
			"\tSystem.debug(LoggingLevel.INFO, code + ' : ' + ${3:errorCount}.get(code));",
			"}"
		],
		"description": "Handles a Database.SaveResult array and gets its errors in a summary displayed on the logs."
	}
}